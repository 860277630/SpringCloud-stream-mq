server.port=8081
# 配置  两个生产者 四个消费者  两个消费者组  共用两个交换机 mykafkaexchange
#首先配置自定义连接
spring.cloud.stream.binders.mykafka.type=kafka
spring.cloud.stream.binders.mykafka.environment.spring.cloud.stream.kafka.binder.brokers=192.168.103.203:9092
#这句话一定要添加 因为默认是关闭的
spring.cloud.stream.binders.mykafka.environment.spring.cloud.stream.kafka.binder.auto-add-partitions=true
spring.cloud.stream.default-binder=mykafka

spring.cloud.stream.bindings.output.binder=mykafka
spring.cloud.stream.bindings.output.destination=mykafkaexchange
spring.cloud.stream.bindings.output.producer.partition-count=2
#如果是数字的话 表示 发送到分区的编号 从0开始 最大值为 partitionCount-1
spring.cloud.stream.bindings.output.producer.partition-key-expression=0

spring.cloud.stream.bindings.mykafka_output01.binder=mykafka
spring.cloud.stream.bindings.mykafka_output01.destination=mykafkaexchange
spring.cloud.stream.bindings.mykafka_output01.producer.partition-count=2
#如果值是 payload，将会使用放在payload的实体类型作为分区依据，可以为自定义类型比如 User，Role 等等。
spring.cloud.stream.bindings.mykafka_output01.producer.partition-key-expression=payload

spring.cloud.stream.bindings.mykafka_output02.binder=mykafka
spring.cloud.stream.bindings.mykafka_output02.destination=mykafkaexchange
spring.cloud.stream.bindings.mykafka_output02.producer.partition-count=2
#如果值是 headers，将会使用放在header的key值作为分区依据
spring.cloud.stream.bindings.mykafka_output02.producer.partition-key-expression=headers['selfKey']

# 因为 Kafka的消费者组成员和 分区的对应关系比较特殊 所以 这里消费者组 对没有起到负载均衡的作用 换成rabbitMQ效果会更好
spring.cloud.stream.bindings.input.binder=mykafka
spring.cloud.stream.bindings.input.destination=mykafkaexchange
spring.cloud.stream.bindings.input.content-type=text/plain
spring.cloud.stream.bindings.input.group=group-A
spring.cloud.stream.bindings.input.consumer.partitioned=true
spring.cloud.stream.bindings.input.consumer.instance-count=2
spring.cloud.stream.bindings.input.consumer.instance-index=0


